#!/usr/bin/env python3
import boto3
from datetime import datetime, timezone

# --- Configuration ---
# The number of days after which a bucket should be considered old
AGE_LIMIT_DAYS = 100

# --- Main Script ---
# Create a client to interact with S3
s3 = boto3.client("s3")

# Get the current time in a way that can be compared with AWS times
now = datetime.now(timezone.utc)

print(f"Starting S3 bucket cleanup...")
print(f"Buckets older than {AGE_LIMIT_DAYS} days OR tagged with 'cleanup=true' will be deleted.")

try:
    response = s3.list_buckets()
except Exception as e:
    print(f"Could not list buckets. Error: {e}")
    exit()

for bucket in response['Buckets']:
    bucket_name = bucket['Name']
    creation_date = bucket['CreationDate']
    
    # Calculate the age of the bucket in days
    age = (now - creation_date).days
    
    print(f"--- Checking bucket: {bucket_name} (Age: {age} days) ---")

    # Default to not deleting
    should_delete = False
    reason = ""

    # --- Condition 1: Check Age ---
    if age >= AGE_LIMIT_DAYS:
        should_delete = True
        reason = f"It is {age} days old (>= {AGE_LIMIT_DAYS} days)."

    # --- Condition 2: Check for Tags (only if age condition not met) ---
    if not should_delete:
        try:
            tag_response = s3.get_bucket_tagging(Bucket=bucket_name)
            tags = tag_response.get('TagSet', [])
            
            for tag in tags:
                if tag['Key'] == 'cleanup' and tag['Value'] == 'true':
                    should_delete = True
                    reason = "It has the 'cleanup=true' tag."
                    break
        
        except s3.exceptions.ClientError as e:
            if e.response['Error']['Code'] != 'NoSuchTagging':
                print(f"  An error occurred checking tags: {e}")

    # --- Deletion Logic ---
    if should_delete:
        print(f"  DELETE TRIGGERED. Reason: {reason}")
        
        try:
            # Empty the bucket first
            print(f"  Emptying all objects from {bucket_name}...")
            objects_to_delete = []
            list_response = s3.list_objects_v2(Bucket=bucket_name)
            
            if 'Contents' in list_response:
                for obj in list_response['Contents']:
                    objects_to_delete.append({'Key': obj['Key']})
                s3.delete_objects(Bucket=bucket_name, Delete={'Objects': objects_to_delete})
                print(f"  Successfully emptied {bucket_name}.")
            else:
                print(f"  Bucket is already empty.")

            # Delete the bucket
            s3.delete_bucket(Bucket=bucket_name)
            print(f"  SUCCESS: Bucket {bucket_name} has been deleted.")

        except Exception as e:
            print(f"  An error occurred during deletion: {e}")

    else:
        print("  No deletion conditions met. Skipping.")

print("\nCleanup script finished.")
